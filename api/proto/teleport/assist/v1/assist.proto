// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.assist.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/assist/v1;assist";

// GetAssistantMessagesRequest is a request to the assistant service.
message GetAssistantMessagesRequest {
  // ConversationId identifies a conversation.
  // It's used to tie all messages in a one conversation.
  string conversation_id = 1;
  // username is a username of the user who sent the message.
  string username = 2;
}

// AssistantMessage is a message sent to the assistant service. The conversation
// must be created first.
message AssistantMessage {
  // type is a type of message. It can be Chat response/query or a command to run.
  string type = 1;
  // CreatedTime is the time when the event occurred.
  google.protobuf.Timestamp created_time = 2;
  // payload is a JSON message
  string payload = 3;
}

// CreateAssistantMessageRequest is a request to the assistant service.
message CreateAssistantMessageRequest {
  // message is a message sent to the assistant service.
  AssistantMessage message = 1;
  // ConversationId is used to tie all messages into a conversation.
  string conversation_id = 2;
  // username is a username of the user who sent the message.
  string username = 3;
}

// GetAssistantMessagesResponse is a response from the assistant service.
message GetAssistantMessagesResponse {
  // messages is a list of messages.
  repeated AssistantMessage messages = 1;
}

// GetAssistantConversationsRequest is a request to get a list of conversations.
message GetAssistantConversationsRequest {
  // username is a username of the user who created the conversation.
  string username = 1;
}

// ConversationInfo is a conversation info. It contains a conversation
// information like ID, title, created time.
message ConversationInfo {
  // id is a unique conversation ID.
  string id = 1;
  // title is a title of the conversation.
  string title = 2;
  // createdTime is the time when the conversation was created.
  google.protobuf.Timestamp created_time = 3;
}

// GetAssistantConversationsResponse is a response from the assistant service.
message GetAssistantConversationsResponse {
  // conversations is a list of conversations.
  repeated ConversationInfo conversations = 1;
}

// CreateAssistantConversationRequest is a request to create a new conversation.
message CreateAssistantConversationRequest {
  // username is a username of the user who created the conversation.
  string username = 1;
  // createdTime is the time when the conversation was created.
  google.protobuf.Timestamp created_time = 2;
}

// CreateAssistantConversationResponse is a response from the assistant service.
message CreateAssistantConversationResponse {
  // id is a unique conversation ID.
  string id = 1;
}

// UpdateAssistantConversationInfoRequest is a request to update the conversation info.
message UpdateAssistantConversationInfoRequest {
  // conversationId is a unique conversation ID.
  string conversation_id = 1;
  // username is a username of the user who created the conversation.
  string username = 2;
  // title is a title of the conversation.
  string title = 3;
}

// IsAssistEnabledRequest is a request to the assistant service on if assist is enabled or not.
message IsAssistEnabledRequest {}

// IsAssistEnabledResponse is a response from the assistant service on if assist is enabled or not.
message IsAssistEnabledResponse {
  // enabled is true if the assist is enabled or not on the auth level.
  bool enabled = 1;
}

// DeleteAssistantConversationRequest is a request to delete the conversation.
message DeleteAssistantConversationRequest {
  // conversationId is a unique conversation ID.
  string conversation_id = 1;
  // username is a username of the user who created the conversation.
  string username = 2;
}

// GetAssistantEmbeddingsRequest is a request to get embeddings.
message GetAssistantEmbeddingsRequest {
  // username is a username of the user who request the embeddings.
  string username = 1;
  // contentQuery is the content that going to be used for similarity search.
  string content_query = 2;
  // limit is the number of embeddings to return (also known as k).
  uint32 limit = 3;
  // kind is the kind of embeddings to return (ex, node).
  string kind = 4;
}

// EmbeddingDocument is a document with an embedding.
message EmbeddedDocument {
  // id is the id of the document.
  string id = 1;
  // content is the content of the document.
  string content = 2;
  // similarityScore is the similarity score of the document.
  float similarity_score = 3;
}

// GetAssistantEmbeddingsResponse is a response from the assistant service.
message GetAssistantEmbeddingsResponse {
  // embeddings is the list of embeddings.
  repeated EmbeddedDocument embeddings = 1;
}

// AssistService is a service that provides an ability to communicate with the Teleport Assist.
service AssistService {
  // CreateNewConversation creates a new conversation and returns the UUID of it.
  rpc CreateAssistantConversation(CreateAssistantConversationRequest) returns (CreateAssistantConversationResponse);

  // GetAssistantConversations returns all conversations for the connected user.
  rpc GetAssistantConversations(GetAssistantConversationsRequest) returns (GetAssistantConversationsResponse);

  // DeleteAssistantConversation deletes the conversation and all messages associated with it.
  rpc DeleteAssistantConversation(DeleteAssistantConversationRequest) returns (google.protobuf.Empty);

  // GetAssistantMessages returns all messages associated with the given conversation ID.
  rpc GetAssistantMessages(GetAssistantMessagesRequest) returns (GetAssistantMessagesResponse);

  // CreateAssistantMessage creates a new message in the given conversation.
  rpc CreateAssistantMessage(CreateAssistantMessageRequest) returns (google.protobuf.Empty);

  // UpdateAssistantConversationInfo updates the conversation info.
  rpc UpdateAssistantConversationInfo(UpdateAssistantConversationInfoRequest) returns (google.protobuf.Empty);

  // IsAssistEnabled returns true if the assist is enabled or not on the auth level.
  rpc IsAssistEnabled(IsAssistEnabledRequest) returns (IsAssistEnabledResponse);
}

// AssistEmbeddingService is a service that provides an ability to communicate with the Assist Embedding service.
service AssistEmbeddingService {
  // AssistantGetEmbeddings returns the embeddings for the given query.
  rpc GetAssistantEmbeddings(GetAssistantEmbeddingsRequest) returns (GetAssistantEmbeddingsResponse);
}
